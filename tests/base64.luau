--!strict

type TestVector = {
	Description: string,
	Expected: string,
	Algorithm: "Encode" | "Decode"
}

type TestVectors = {[string]: TestVector}

local AlgorithmName = script.Parent.Name
local Algorithm = require(script.Parent)

local TestVectors: TestVectors = {
	["VGhlIHF1aWNrIGJyb3duIGZveCBqdW1wcyBvdmVyIHRoZSBsYXp5IGRvZy4="] = { Algorithm = "Decode", Description = "Pangramm Example [Decode]", Expected = "The quick brown fox jumps over the lazy dog." },
	["0J/RgNC40LLQtdGCLCDQvNC40YAh"] = { Algorithm = "Decode", Description = "UTF-8 Example [Decode]", Expected = "Привет, мир!" },
	["YWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYQ=="] = { Algorithm = "Decode", Description = "Block of Characters [Decode]", Expected = string.rep("a", 55) },
	
	["The quick brown fox jumps over the lazy dog."] = { Algorithm = "Encode", Description = "Pangramm Example [Encode]", Expected = "VGhlIHF1aWNrIGJyb3duIGZveCBqdW1wcyBvdmVyIHRoZSBsYXp5IGRvZy4=" },
	["Привет, мир!"] = { Algorithm = "Encode", Description = "UTF-8 Example [Encode]", Expected = "0J/RgNC40LLQtdGCLCDQvNC40YAh" },
	[string.rep("a", 55)] = { Algorithm = "Encode", Description = "Block of Characters [Encode]", Expected = "YWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYQ==" },
}

for TestString, Info in TestVectors do
	local Result
	
	if Info.Algorithm == "Decode" then
		Result = Algorithm.Decode(buffer.fromstring(TestString)) 
	elseif Info.Algorithm == "Encode" then
		Result = Algorithm.Encode(buffer.fromstring(TestString)) 
	end

	local ErrorMessage = string.format(
		"%s: Test String '%s' (%s) produced incorrect hash. Expected '%s', got '%s'",
		AlgorithmName,
		TestString,
		Info.Description,
		Info.Expected,
		Result
	)

	assert(Result == Info.Expected, ErrorMessage)
	warn(`{AlgorithmName}: Test '{Info.Description}' passed`)
end

print(`[{AlgorithmName}] All test cases passed`)

return 0